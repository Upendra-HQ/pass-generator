import { useState, useCallback, useEffect, useRef } from 'react';

function App() {
  const [length, setLength] = useState(0);
  const [numberAllow, setNumberAllow] = useState(false);
  const [characterAllow, setCharacterAllow] = useState(false);
  const [password, setPassword] = useState("");
  const [displayedPassword, setDisplayedPassword] = useState("");
  const [copyButtonText, setCopyButtonText] = useState("Copy");
  const [footerMessage, setFooterMessage] = useState("");
  const passwordRef = useRef(null);
  const animationRef = useRef({ interval: null, timeout: null });

  const passwordGenerate = useCallback(() => {
    const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    const numbers = "0123456789";
    const specialChars = "!@#$%^&*()_+=";

    let allChars = letters; 
    let passwordChars = []; 
    const numericLength = Number(length); 

    if (numericLength > 0) {
      passwordChars.push(letters.charAt(Math.floor(Math.random() * letters.length)));
    }

    if (numberAllow) {
      allChars += numbers;
      if (passwordChars.length < numericLength) { 
        passwordChars.push(numbers.charAt(Math.floor(Math.random() * numbers.length)));
      }
    }
    
    if (characterAllow) {
      allChars += specialChars;
      if (passwordChars.length < numericLength) { 
        passwordChars.push(specialChars.charAt(Math.floor(Math.random() * specialChars.length)));
      }
    }
    
    const remainingLength = numericLength - passwordChars.length;
    
    for (let i = 0; i < remainingLength; i++) {
      passwordChars.push(allChars.charAt(Math.floor(Math.random() * allChars.length)));
    }

    for (let i = passwordChars.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [passwordChars[i], passwordChars[j]] = [passwordChars[j], passwordChars[i]];
    }

    setPassword(passwordChars.join(''));
    
  }, [length, numberAllow, characterAllow, setPassword]);

  const copyPasswordToClipboard = useCallback(() => {
    passwordRef.current?.select();
    passwordRef.current?.setSelectionRange(0, 999);

    try {
      document.execCommand('copy');
      setCopyButtonText("Copied!");
      setTimeout(() => {
        setCopyButtonText("Copy");
      }, 2000);
    } catch (err)
      {
      console.error('Failed to copy text: ', err);
      setCopyButtonText("Failed");
      setTimeout(() => {
        setCopyButtonText("Copy");
      }, 2000);
    }
  }, [password]);

  useEffect(() => {
    passwordGenerate();
  }, [length, numberAllow, characterAllow, passwordGenerate]);

  useEffect(() => {
    clearInterval(animationRef.current.interval);
    clearTimeout(animationRef.current.timeout);
    
    setFooterMessage("");

    if (!password) return;

    const allChars = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789!@#$%^&*";
    const animationDuration = 400;
    const updateFrequency = 50;

    animationRef.current.interval = setInterval(() => {
      let randomPass = Array.from({ length: password.length }, () =>
        allChars[Math.floor(Math.random() * allChars.length)]
      ).join('');
      setDisplayedPassword(randomPass);
    }, updateFrequency);

    animationRef.current.timeout = setTimeout(() => {
      clearInterval(animationRef.current.interval);
      setDisplayedPassword(password);
      
      setFooterMessage("Generated by: Upendra Seervi"); 

    }, animationDuration);

    return () => {
      clearInterval(animationRef.current.interval);
      clearTimeout(animationRef.current.timeout);
    };
  }, [password]);

  return (
    <div className="w-full max-w-md mx-auto shadow-md rounded-lg p-6 my-8 bg-gray-800 text-gray-100 font-sans">
      <h1 className="text-center text-white text-2xl my-3">Password Generator</h1>

      <div className="flex shadow rounded-lg overflow-hidden mb-4">
        <input
          type="text"
          readOnly
          value={displayedPassword}
          className="w-full p-3 border-none outline-none text-gray-900 font-mono"
          placeholder="Password"
          ref={passwordRef}
        />
        <button
          onClick={copyPasswordToClipboard}
          className="outline-none bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 shrink-0 transition-all duration-200"
        >
          {copyButtonText}
        </button>
        <button
          onClick={passwordGenerate}
          title="Refresh Password"
          className="outline-none bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 shrink-0 transition-all duration-200"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
            <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
          </svg>
        </button>
      </div>

      <div className="flex flex-col sm:flex-row text-sm gap-y-4 gap-x-4">
        <div className='flex items-center gap-x-2 flex-grow'>
          <input
            type="range"
            min="7"
            max="20"
            value={length}
            className="cursor-pointer w-full accent-blue-700"
            onChange={(e) => setLength(Number(e.target.value))}
            id="lengthRange"
          />
          <label htmlFor="lengthRange" className="whitespace-nowrap">Length: {length}</label>
        </div>

        <div className='flex items-center gap-x-1'>
          <input
            type="checkbox"
            checked={numberAllow}
            id="numberInput"
            className="cursor-pointer accent-blue-700"
            onChange={() => { setNumberAllow((prev) => !prev); }}
          />
          <label htmlFor="numberInput">Numbers</label>
        </div>

        <div className='flex items-center gap-x-1'>
          <input
            type="checkbox"
            checked={characterAllow}
            id="characterInput"
            className="cursor-pointer accent-blue-700"
            onChange={() => { setCharacterAllow((prev) => !prev); }}
          />
          <label htmlFor="characterInput">Characters</label>
        </div>
      </div>
      
      <div className="text-center text-xs text-gray-400 mt-5 h-4 transition-opacity duration-300">
        {footerMessage}
      </div>

    </div>
  );
}

export default App;

